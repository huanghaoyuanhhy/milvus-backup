// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package milvus

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockManage creates a new instance of MockManage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManage {
	mock := &MockManage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManage is an autogenerated mock type for the Manage type
type MockManage struct {
	mock.Mock
}

type MockManage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManage) EXPECT() *MockManage_Expecter {
	return &MockManage_Expecter{mock: &_m.Mock}
}

// PauseGC provides a mock function for the type MockManage
func (_mock *MockManage) PauseGC(ctx context.Context, sec int32) (string, error) {
	ret := _mock.Called(ctx, sec)

	if len(ret) == 0 {
		panic("no return value specified for PauseGC")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (string, error)); ok {
		return returnFunc(ctx, sec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) string); ok {
		r0 = returnFunc(ctx, sec)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, sec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManage_PauseGC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseGC'
type MockManage_PauseGC_Call struct {
	*mock.Call
}

// PauseGC is a helper method to define mock.On call
//   - ctx context.Context
//   - sec int32
func (_e *MockManage_Expecter) PauseGC(ctx interface{}, sec interface{}) *MockManage_PauseGC_Call {
	return &MockManage_PauseGC_Call{Call: _e.mock.On("PauseGC", ctx, sec)}
}

func (_c *MockManage_PauseGC_Call) Run(run func(ctx context.Context, sec int32)) *MockManage_PauseGC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManage_PauseGC_Call) Return(s string, err error) *MockManage_PauseGC_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockManage_PauseGC_Call) RunAndReturn(run func(ctx context.Context, sec int32) (string, error)) *MockManage_PauseGC_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeGC provides a mock function for the type MockManage
func (_mock *MockManage) ResumeGC(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ResumeGC")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManage_ResumeGC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeGC'
type MockManage_ResumeGC_Call struct {
	*mock.Call
}

// ResumeGC is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManage_Expecter) ResumeGC(ctx interface{}) *MockManage_ResumeGC_Call {
	return &MockManage_ResumeGC_Call{Call: _e.mock.On("ResumeGC", ctx)}
}

func (_c *MockManage_ResumeGC_Call) Run(run func(ctx context.Context)) *MockManage_ResumeGC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManage_ResumeGC_Call) Return(s string, err error) *MockManage_ResumeGC_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockManage_ResumeGC_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockManage_ResumeGC_Call {
	_c.Call.Return(run)
	return _c
}
